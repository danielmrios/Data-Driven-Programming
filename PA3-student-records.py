# -*- coding: utf-8 -*-
"""PA3part6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13RAeZPscRiojsVFHtG0d754FK_C9EtdR
"""

from google.colab import files
uploaded = files.upload()

"""
@filename: PA3part6.py
@authors: Daniel Rios
@description: It begins by reading student data from a CSV file, creating a
nested dictionary (records) to store information about individual students and
their performance in two courses. The script calculates and writes each student's
GPA to a 'gpa.txt' file. The user is then presented with a menu offering options
to search for a student's grades, add a new student, or modify existing records.
The modification feature allows users to add or delete courses, grades, or
assignments.
@date: 11/19/23
@version: 1.00
"""

# ----------------------------- Read file

import csv

with open('grades.csv', 'r') as file:
    # create a csv reader object
    csv_reader = csv.reader(file)

    # Store the rows in a list for inspection
    rows = list(csv_reader)

# print the rows
for row in rows:
  print(row)

# 2 -------------------------- Create nested dictionary

records = {}

# iterate over each row and populate the 'records' dictionary
for row in rows[3:]:  # skip over the first 3 rows (header)
    student_name = row[0]

    # add student information to the 'records' dictionary
    records[student_name] = {
        'Course1': {
            'homework': [float(row[1]), float(row[2])],
            'midterm': float(row[3]),
            'final': float(row[4])
        },
        'Course2': {
            'homework': [float(row[5]), float(row[6])],
            'midterm': float(row[7]),
            'final': float(row[8])
        }
    }

# 1 ------------------------- Create text file with final grades

with open('gpa.txt', 'w') as output_file:
    # Write header to the output file
    output_file.write('Student\tGPA\n')

    # iterate over each student in the 'records' dictionary
    for student_name, courses in records.items():
        # Calculate GPA for each student
        course1_grade = (
            0.5 * (sum(courses['Course1']['homework']) / 2) +
            0.2 * courses['Course1']['midterm'] +
            0.3 * courses['Course1']['final']
        )
        course2_grade = (
            0.5 * (sum(courses['Course2']['homework']) / 2) +
            0.2 * courses['Course2']['midterm'] +
            0.3 * courses['Course2']['final']
        )
        gpa = ((course1_grade + course2_grade) / 2) / 25

        # Write the results to the text file
        output_file.write(f"{student_name}\t{gpa:.2f}\n")

# Open and print the new file
with open('gpa.txt', 'r') as output_file:
    # Read and print each line
    for line in output_file:
        print(line.strip())

# 3 - 6 ------------------------- Search, add, and modify records

while True:

  search_add = input('1 - Search for student \n2 - Add a student \n3 - Modify student records \n4 - Quit \n')
  # search for a student
  if search_add == '1':
    search_student = input('Enter student name: ')

    # see if student in records
    if search_student in records:
      print(f'\nCourses and Grades for {search_student}:')

      for course,  assignment in records[search_student].items():
        # print courses for student
          print(f'{course}:')
          # print assignment and grades for student
          for assignment, score in assignment.items():
              print(f'\t{assignment}: {score}')
      print()

    else:
      print('\nStudent not in our records.\n')

  # add a new student
  elif search_add == '2':
    add_student = input('Enter new student name: ')


    if add_student not in records:
      add_course = input('Add a course: ')
      # intitialize dictionary in records for new student
      records[add_student] = {}
      records[add_student][add_course] = {
              'homework': [float(input("Enter homework 1 grade: ")), float(input("Enter homework 2 grade: "))],
              'midterm': float(input("Enter midterm score: ")),
              'final': float(input("Enter final score: "))
      }
      print(f'{add_student} has been added to our records\n')

    else:
      print("student is already in records\n")

# Modify Prompt -------------------------------------------------------

  elif search_add == '3':

    # check if student in records
    modify_student = input('Enter student name: ')
    if modify_student in records:

      while True:

        # new prompt
        modify_choice = input('\n1 - Add a course \n2 - Delete a course \n3 - Add a grade \n4 - Delete a grade \n5 - Quit \n')

        # add a course
        if modify_choice == '1':
          add_course_modify = input('Add a course: ')
          # intitialize dictionary in records for new student
          records[modify_student][add_course_modify] = {
                  'homework': [float(input("Enter homework 1 grade: ")), float(input("Enter homework 2 grade: "))],
                  'midterm': float(input("Enter midterm score: ")),
                  'final': float(input("Enter final score: "))
          }
          print(f'{add_course_modify} has been added')

        # delete a course
        elif modify_choice == '2':
          delete_course = input('Delete a course: ')
              # check if the course exists before deleting
          if delete_course in records[modify_student]:
            del records[modify_student][delete_course]
            print(f'The course {delete_course} has been deleted.\n')
          else:
            print(f'The course {delete_course} does not exist.\n')

        # add a grade
        elif modify_choice == '3':

          user_input = input('Enter course, assignment, and grade (separated by commas): ')
           # get items in input
          inputs = [item.strip() for item in user_input.split(',')]

          if len(inputs) == 3:
            # assign items to object
              course_to_modify, assignment_to_modify, grade_to_add = inputs

              # check if the course exists before modifying
              if course_to_modify in records[modify_student]:

                # check if the assignment exists to add a grade to
                if assignment_to_modify in records[modify_student][course_to_modify]:

                  # add or update the grade for the assignment
                  records[modify_student][course_to_modify][assignment_to_modify] = float(grade_to_add)
                  print(f'Grade for {assignment_to_modify} in {course_to_modify} has been added/updated\n')

                else:
                  print(f'The assignment {assignment_to_modify} does not exist in {course_to_modify}\n')

              else:
                  print(f'The course {course_to_modify} does not exist.\n')

          else:
              print('Invalid input. Please provide course, assignment, and grade separated by spaces.\n')

          # delete a grade for specific assignment
        elif modify_choice == '4':
          user_input = input('Enter course and assignment (separated by commas): ')
          inputs = [item.strip() for item in user_input.split(',')]

          if len(inputs) == 2:
              course_to_modify, assignment_to_modify = inputs
              # check if the course exists before modifying

              if course_to_modify in records[modify_student]:

                  if assignment_to_modify in records[modify_student][course_to_modify]:
                      # delete the entire assignment entry
                      del records[modify_student][course_to_modify][assignment_to_modify]
                      print(f'The assignment {assignment_to_modify} in {course_to_modify} has been deleted\n')

                  else:
                      print(f'The assignment {assignment_to_modify} does not exist in {course_to_modify}\n')

              else:
                  print(f'The course {course_to_modify} does not exist\n')

          else:
              print('Invalid input. Please provide course and assignment separated by spaces\n')

        # if user enters 5 break modify loop
        elif modify_choice == '5':
          print('Quitting modify student records\n')
          break

        else:
          print('invalid response, choose from list of choices 1 through 5\n')

    else: print(f'{modify_student} is not in records, enter 2 to add new student\n')

  # if user enters 4 break program loop
  elif search_add == '4':
    print('Quitting the program')
    break

  else:
    print('invalid response, choose from list of choices 1 through 4\n')
