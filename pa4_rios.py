# -*- coding: utf-8 -*-
"""PA4-Rios.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lxDVl74yXCX4sVhtU1MmDm0-1DWeNzds
"""

# import files
from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

'''
@filename: PA4-Rios
@author: Daniel Rios
@description: The program reads 3 csv's and stores them in data frames.
It then asks the user to input both a start and end year, then the program
plots 4 different graphs displaying information from the csv's between the dates.
@date: 12/2/2023
@version: 1.00
'''

import pandas as pd
import matplotlib.pyplot as plt

# read the data from csv's and format date values
unrate_df = pd.read_csv('UNRATE.csv', skiprows=1, names=["DATE", "UNRATE"], parse_dates=["DATE"])
gdp_df = pd.read_csv('GDPC1.csv', skiprows=1, names=["DATE", "GDP"], parse_dates=["DATE"])

# create custom date parser to correct cpi data, 1900s dates read as 2000s
def adjusted_date(date):
    month, day, year = map(int, date.split('/'))
    if 47 < year < 100:
        year += 1900
    else:
        year += 2000
    # return the adjusted date as a timestamp object
    return pd.Timestamp(year, month, day)

# read the CPI data with the adjusted date parser
cpi_df = pd.read_csv("CPIAUCSL.csv", skiprows=1, names=["DATE", "CPI"], parse_dates=["DATE"], date_parser=adjusted_date)

# set the 'DATE' column as the index for each dataframe
unrate_df.set_index("DATE", inplace=True)
cpi_df.set_index("DATE", inplace=True)
gdp_df.set_index("DATE", inplace=True)

# define a function to get data from csv for a specific date range
def get_year_data(start_year, end_year):
    # convert input years to datetime format
    start_date = pd.to_datetime(str(start_year))
    end_date = pd.to_datetime(str(end_year))

    # index specific date range and check eligibility within datasets
    available_start_date = max(start_date, unrate_df.index.min(), cpi_df.index.min(), gdp_df.index.min())
    available_end_date = min(end_date, unrate_df.index.max(), cpi_df.index.max(), gdp_df.index.max())

    # create banded dataframes for each CSV data between accepted start and end date
    unrate_data = unrate_df.loc[available_start_date:available_end_date]
    cpi_data = cpi_df.loc[available_start_date:available_end_date]
    gdp_data = gdp_df.loc[available_start_date:available_end_date]

    return unrate_data, cpi_data, gdp_data

# user inputs start and end year for plots
start_year = int(input("Enter the start year (yyyy): "))
end_year = int(input("Enter the end year (yyyy): "))

# get data from start year till end year
unrate_data, cpi_data, gdp_data = get_year_data(start_year, end_year)

# function to plot the unemployment rate over time
def unemployment_rate(unrate_data):
    plt.figure(figsize=(8, 4))
    plt.bar(unrate_data.index, unrate_data["UNRATE"], width=25)
    plt.title('Unemployment Rate Over Time')
    plt.xlabel('Date')
    plt.ylabel('Unemployment Rate')
    plt.show()

# function to plot the consumer price index (CPI) over time
def cpi_plot(cpi_data):
    plt.figure(figsize=(8, 4))
    plt.plot(cpi_data.index, cpi_data["CPI"])
    plt.title("Consumer Price Index (CPI)")
    plt.xlabel("Date")
    plt.ylabel("CPI")
    plt.show()

# function to plot the scatter plot of unemployment rate vs CPI Change
def unemployment_cpi_change(unrate_data, cpi_data):
    # merge datasets on the 'DATE' column
    merged_data = unrate_data.merge(cpi_data, how='inner', left_index=True, right_index=True)

    # compute CPI change
    cpi_change = merged_data['CPI'].diff()

    # create scatter plot
    plt.figure(figsize=(8, 4))
    plt.scatter(merged_data['UNRATE'], cpi_change)
    plt.title("Unemployment Rate vs. CPI Change")
    plt.xlabel("Unemployment Rate (%)")
    plt.ylabel("Change in CPI")
    plt.show()

# define function to plot CPI and GDP on the same graph
def cpi_gdp_line(cpi_data, gdp_data):
    fig, ax1 = plt.subplots(figsize=(8, 4))

    # plot CPI on the left y axis
    color = 'tab:red'
    ax1.set_xlabel('Date')
    ax1.set_ylabel('CPI', color=color)
    ax1.plot(cpi_data.index, cpi_data["CPI"], color=color)
    ax1.tick_params(axis='y', labelcolor=color)

    # use dual axes for subplot of GDP on the right y axis
    ax2 = ax1.twinx()
    color = 'tab:blue'
    ax2.set_ylabel('GDP', color=color)
    ax2.plot(gdp_data.index, gdp_data["GDP"], color=color)
    ax2.tick_params(axis='y', labelcolor=color)

    fig.tight_layout()
    plt.title("CPI and GDP on Same Graph")
    plt.show()

# plot visualizations
unemployment_rate(unrate_data)
cpi_plot(cpi_data)
unemployment_cpi_change(unrate_data, cpi_data)
cpi_gdp_line(cpi_data, gdp_data)