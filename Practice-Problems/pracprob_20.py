# -*- coding: utf-8 -*-
"""PracProb_20

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RBAV3S7WVMIsY5BcbyIHNVdbqLs1R7Wa
"""

'''
@filename: PracProb_20.py
@authors: Adil Shafqat, Daniel Rios, Qianxun Tu
@description: the program defines two functions, each returning the fibonnaci
sequence for a given number. The first one simply calculates it using multiple
if statements. The second one creates a dictionary which stores the values for
each calculated number in the sequence. The code also checks the execution time
for each function, and outputs it.
@date: 11/17/2023
@version: 1.00
'''
import time
#define function fibonacci_recursive with input as number
def fibonacci_recursive(n):
#if n is less than 0, fibonacci is not possible
  if n < 0:
    print("Input must be positive integer")
#if n is 0, the fibonacci is simply 0
  elif n == 0:
    return 0
#if n is 1, the fibonacci is simply 1
  elif n == 1:
    return 1
#similarly if n is 2, the fibonacci is 1
  elif n == 2:
    return 1
#for all other cases, the fibonacci is fibonacci of n-1 + fibonacci of n-2
  else:
    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)
#calculate execution time for first function
start1 = time.time()
end1 = time.time()
#call to function within file
print(f"{fibonacci_recursive(40)}, time without dictionary= {end1-start1} seconds")


#define function fast_fib with input as number and dictionary
def fast_fib(n, my_dict):
#if n is less than 0, fibonacci is not possible
  if n < 0:
    return "Input must be positive integer"
#if we have already stored fibonacci for n in dictionary, simply return the stored value
  elif n in my_dict:
    return my_dict[n]
#for all other cases calculate fibonacci and store as value in dictionary
  else:
    my_dict[n] = fast_fib(n-1, my_dict) + fast_fib(n-2, my_dict)
    return my_dict[n]
#initialize dictionary as prompted in assignment
my_dict = {0:0, 1:1}
#calculate execution time for second function
start2 = time.time()
end2 = time.time()
#call to function within file
print(f"{fast_fib(40, my_dict)}, time using dictionary= {end2 - start2} seconds")