# -*- coding: utf-8 -*-
"""PracProb_18

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gQZ2DPMd1iYVkBdA0RdR-NANXK2kiQmy
"""

from google.colab import files
uploaded = files.upload()

'''
@filename: PracProb_18.py
@authors: Adil Shafqat, Qianxun Tu, Daniel Rios
@description: The program has 4 separate plots. The first is of
a raw data set of pairs of numbers. The second is a modified data
set where we include odd numbers between even values in the data set,
for the x axis, and include corresponding y axis values by averaging
the values of y before and after the ith position. Then we prompt
the user for a starting point, find the closest x value in the data,
and plot the values from that point onwards. Finally, we plot an
annotated version of part 2 with an arrow pointing to the max point.
@date: 11/13/2023
@version: 1.00
'''
import numpy as np
import matplotlib.pyplot as plt
my_file = open('Practice_18.csv')

#Part 1

#initialize two lists for each column of data
list1 = []
list2 = []

#split line in data set and append them to list1 for x
#and list2 for y
for line in my_file:
  values = line.split(',')
  list1.append(float(values[0]))
  list2.append(float(values[1]))

#plot original data with list1 as x axis and list2 as y axis
plt.figure(figsize = (6,4))
plt.plot(list1, list2)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Original Data')
plt.show()

#Part 2

#initialize two lists for each column of modified data
x_long = []
y_long = []

#append odd number between even numbers for x values in list
last_index = len(list1) - 1
for i in range(len(list1)):
  x_long.append(list1[i])
  y_long.append(list2[i])
  x_long.append(list1[i] + 1)

#create corresponding y values as average of y values above
#and below ith position in list
  if i < len(list1) - 2:
    new_y = (list2[i] + list2[i+1])/2
    y_long.append(new_y)
  else:
    y_long.append(list2[i])

#plot modified data and label as such
plt.figure(figsize = (6,4))
plt.plot(x_long, y_long)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Modified Data')
plt.show()


#Part 3

#prompt user for starting point on x axis
user_input = float(input('Enter start point of plot from 10 to 198:\n'))

#search list1 for closest x value to users input. This avoids
#an issue if the user inputs, for example 100, and the program
#responds it can not find the matching x value
closest_value = min(list1, key=lambda x: abs(x - user_input))
if 10 <= closest_value <= 198:

#plot data from closest value to user input till the end,
#provided input is within the range of x values
  start_index = list1.index(closest_value)
  plt.figure(figsize=(6,4))
  plt.plot(list1[start_index:], list2[start_index:])
  plt.xlabel('X')
  plt.ylabel('Y')
  plt.title(f'Plot  beginning from {closest_value}')
  plt.show()


#Part 4

#find maximum value from modified data for x and y and store
#as max_x and max_y
max_index = np.argmax(y_long)
max_x = x_long[max_index]
max_y = y_long[max_index]

#plot modified data along with annotated arrow showing the
#maximum point of the plot.
plt.figure(figsize=(6, 4))
plt.plot(x_long, y_long)
plt.annotate('Max point', xy=(max_x, max_y), xytext=(max_x + 20, max_y),
             arrowprops=dict(arrowstyle='->', lw=2))
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Modified Data with Max Point Annotation')
plt.show()